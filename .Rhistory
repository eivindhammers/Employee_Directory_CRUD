runApp('C:/R/Github repositories/MP_book')
runApp('C:/R/Github repositories/MP_book')
shiny::runApp('C:/R/Github repositories/MP_book')
shiny::runApp('C:/R/Github repositories/MP_book')
runApp('C:/R/Github repositories/MP_book')
shiny::runApp('C:/R/Github repositories/MP_book')
shiny::runApp('C:/R/Github repositories/MP_book')
runApp('C:/R/Github repositories/MP_book')
runApp('C:/R/Github repositories/MP_book')
shiny::runApp('C:/R/Github repositories/MP_book')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='niels-van-der-velden',
token='AA5E0F4BB32BCD5106968C8804B825B1',
secret='FeQ5MjqbBrCXxBRdYb6mIXLsB4bQiUly4mdyZuZ/')
rsconnect::setAccountInfo(name='niels-van-der-velden',
token='AA5E0F4BB32BCD5106968C8804B825B1',
secret='FeQ5MjqbBrCXxBRdYb6mIXLsB4bQiUly4mdyZuZ/')
library(rsconnect)
rsconnect::setAccountInfo(name='niels-van-der-velden',
token='AA5E0F4BB32BCD5106968C8804B825B1',
secret='FeQ5MjqbBrCXxBRdYb6mIXLsB4bQiUly4mdyZuZ/')
deployApp()
deployApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='niels-van-der-velden',
token='AA5E0F4BB32BCD5106968C8804B825B1',
secret='FeQ5MjqbBrCXxBRdYb6mIXLsB4bQiUly4mdyZuZ/')
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='niels-van-der-velden',
token='AA5E0F4BB32BCD5106968C8804B825B1',
secret='FeQ5MjqbBrCXxBRdYb6mIXLsB4bQiUly4mdyZuZ/')
shiny::runApp()
runApp()
runApp()
input$department_filter
runApp()
runApp()
files <- list.files(path = "~/Downloads/", pattern = "FoodPricesData.csv", full.names = TRUE)
prices_list <- vector("list", length = length(files))
i<-1
read_csv(files[i])
library(tidyverse)
library(osrm)
library(tmaptools)
read_csv(files[i])
for (i in 1:length(files)) {
prices_list[[i]]  <- read_csv(files[i]) %>%
mutate(Year = as.integer(Year),
Price = as.numeric(Price))
}
prices <- do.call("bind_rows", prices_list)
loc <- prices %>%
mutate(loc = paste0(Country, " ", `Admin 1`, " ", Market)) %>%
pull(loc)
geocode_OSM(loc[1])
loc <- prices %>%
mutate(loc = paste0(Market, " ", Country)) %>%
pull(loc)
geocode_OSM(loc[1])
geocode_OSM(loc[1], return.first.only = FALSE)
geocode_OSM(loc[1], return.first.only = FALSE, as.sf = TRUE)
geocode_OSM(loc[1], return.first.only = FALSE)
geocode_OSM(loc[1], return.first.only = FALSE, details = TRUE)
geocode_OSM(loc[1], return.first.only = FALSE, details = TRUE) -> t
View(t)
geocode_OSM(loc[c(1,2)])
geocode_OSM(loc[c(1,2)], return.first.only = FALSE)
geocode_OSM(loc[1:5], return.first.only = FALSE)
osr
View(prices)
loc <- prices %>%
mutate(loc = paste0(Market, " ", Country)) %>%
pull(loc) %>%
distinct()
loc <- prices %>%
mutate(loc = paste0(Market, " ", Country)) %>%
select(loc) %>%
distinct()
geocode_OSM(loc$loc[1:5], return.first.only = FALSE)
geocode_OSM(loc$loc[1:5], return.first.only = FALSE, details = TRUE)
geocode_OSM(loc$loc[1:5], return.first.only = FALSE, details = TRUE) %>%
filter(class == "place")
loc$loc[1:5]
geocode_OSM(loc$loc[1], return.first.only = FALSE, details = TRUE) %>%
filter(class == "place")
geocode_OSM(loc$loc[1], return.first.only = FALSE, details = TRUE)
geocode_OSM(loc$loc[1:10], return.first.only = FALSE, details = TRUE)
loc <- prices %>%
mutate(loc = paste0(Market, ", ", `Admin 1`, ", ", Country)) %>%
select(loc) %>%
distinct()
geocode_OSM(loc$loc[1:10], return.first.only = FALSE, details = TRUE)
geocode_OSM(loc$loc[1:10], return.first.only = FALSE, details = TRUE) %>%
filter(class == "place")
filter(prices, country == "Nigeria")
filter(prices, Country == "Nigeria")
table(prices$Commodity)
table(prices$Country)
table(prices$Country) -> as.vector()
table(prices$Country) %>% as.vector()
files
prices_list <- vector("list", length = length(files))
for (i in 1:length(files)) {
prices_list[[i]]  <- read_csv(files[i]) %>%
mutate(Year = as.integer(Year),
Price = as.numeric(Price))
}
prices <- do.call("rbind", prices_list)
files[i]
str_split_fixed(files[i], "_")
name <- str_split_fixed(files[i], "_", 4)
View(name)
name <- str_split_fixed(files[i], "_", 4)$V4
name <- str_split_fixed(files[i], "_", 4)[4]
name <- str_split_fixed(files[i], "_", 4)[3]
prices_list <- vector("list", length = length(files))
for (i in 1:length(files)) {
name <- str_split_fixed(files[i], "_", 4)[3]
prices_list[[name]]  <- read_csv(files[i]) %>%
mutate(Year = as.integer(Year),
Price = as.numeric(Price))
}
prices <- do.call("rbind", prices_list)
View(prices_list)
View(prices_list)
name(prices_list[i])
names(prices_list[i])
names(prices_list[i]) <- "test"
View(prices_list)
names(prices_list[100])
names(prices_list[100]) <- "test"
View(prices_list)
names(prices_list[[100]]) <- "test"
names(prices_list[[100]])
install.packages("rlsit")
install.packages("rlist")
rlist::list.names(prices_list)
rlist::list.names(prices_list[1])
rlist::list.names(prices_list[1]) <- "test"
str_split_fixed(files, "_", 4)[3]
str_split_fixed(files, "_", 4)
names <- str_split_fixed(files, "_", 4)[, 3]
names(prices_list) <- str_split_fixed(files, "_", 4)[, 3]
View(prices_list)
files <- list.files(path = "~/Downloads/", pattern = "FoodPricesData.csv", full.names = TRUE)
prices_list <- vector("list", length = length(files))
for (i in 1:length(files)) {
prices_list[[i]]  <- read_csv(files[i]) %>%
mutate(Year = as.integer(Year),
Price = as.numeric(Price))
}
names(prices_list) <- str_split_fixed(files, "_", 4)[, 3]
View(prices_list)
View(prices_list)
loc <- prices %>%
mutate(loc = paste0(Market, ", ", `Admin 1`, ", ", Country)) %>%
select(loc) %>%
distinct()
table(prices$Country)
files <- list.files(path = "~/Downloads/", pattern = "FoodPricesData.csv", full.names = TRUE)
prices_list <- vector("list", length = length(files))
for (i in 1:length(files)) {
prices_list[[i]]  <- read_csv(files[i]) %>%
mutate(Year = as.integer(Year),
Price = as.numeric(Price))
}
names(prices_list) <- str_split_fixed(files, "_", 4)[, 3]
prices <- do.call("rbind", prices_list)
nig <- filter(prices, Country == "Nigeria")
View(nig)
table(nig$Market)
geocode_OSM(loc$loc[1:10], return.first.only = FALSE, details = TRUE, geometry = "point", server = "192.168.68.62:8080")
geocode_OSM(loc$loc[1:10], return.first.only = FALSE, details = TRUE, geometry = "point", server = "192.168.68.62:8082") %>%
filter(class == "place")
geocode_OSM(loc$loc[1:2], return.first.only = FALSE, details = TRUE, geometry = "point", server = "192.168.68.62:8082")
geocode_OSM(loc$loc, return.first.only = FALSE, details = TRUE, geometry = "point") %>%
filter(class == "place")
table(prices$Country)
loc <- prices %>%
filter(Country == "Sierra Leone")
loc <- prices %>%
filter(Country == "Sierra Leone")
mutate(loc = paste0(Market, ", ", `Admin 1`, ", ", Country)) %>%
select(loc) %>%
distinct()
loc <- prices %>%
filter(Country == "Sierra Leone") %>%
mutate(loc = paste0(Market, ", ", `Admin 1`, ", ", Country)) %>%
select(loc) %>%
distinct()
coords <- filter(geocode_OSM(loc$loc, return.first.only = FALSE, details = TRUE, geometry = "point") %>%
filter(class == "place")
coords <- geocode_OSM(loc$loc, return.first.only = FALSE, details = TRUE, geometry = "point") %>%
filter(class == "place")
coords <- geocode_OSM(loc$loc, return.first.only = FALSE, details = TRUE, geometry = "point") %>%
filter(class == "place")
View(coords)
coords %>%   group_by(query) %>%
filter(importance == max(importance))
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
filter(importance == max(importance))
sle
sle <- filter(prices, Country == "Sierra Leone")
prices <- do.call("rbind", prices_list) %>%
mutate(loc = paste0(Market, ", ", `Admin 1`, ", ", Country))
sle <- filter(prices, Country == "Sierra Leone")
loc <- sle %>%
select(loc) %>%
distinct()
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
filter(importance == max(importance)) %>%
right_join(sle, by = c("loc" = "query"))
sle <- filter(prices, Country == "Sierra Leone")
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
filter(importance == max(importance)) %>%
right_join(sle, by = c("loc" = "query"))
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
filter(importance == max(importance)) %>%
right_join(sle, by = c("query" = "loc"))
View(sle)
coords$query
coords <- geocode_OSM(loc$loc, return.first.only = FALSE, details = TRUE, geometry = "point", server = "localhost:8080/") %>%
filter(class == "place")
coords <- geocode_OSM(loc$loc, return.first.only = FALSE, details = TRUE, geometry = "point", server = "192.168.68.62:8080/") %>%
filter(class == "place")
View(coords)
View(loc)
coords <- geocode_OSM(loc$loc, return.first.only = FALSE, details = TRUE, geometry = "point", server = "192.168.68.62:8080/")
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
mutate(nrow = nrow(.))
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
mutate(nrow = count())
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
mutate(nrow = count(.))
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
count()
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
add_count() %>%
filter(class == "place" | n == 1)
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
add_count() %>%
filter(class == "place" | n == 1) %>%
filter(importance == max(importance))
sle <- filter(prices, Country == "Sierra Leone")
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
add_count() %>%
filter(class == "place" | n == 1) %>%
filter(importance == max(importance)) %>%
right_join(sle, by = c("query" = "loc"))
View(sle)
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
add_count() %>%
mutate(n_place = sum(class == "place")) %>%
filter(class == "place" | n_place == 0)
sle <- filter(prices, Country == "Sierra Leone")
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
add_count() %>%
mutate(n_place = sum(class == "place"))
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
add_count() %>%
mutate(n_place = sum(class == "place")) %>%
filter(class == "place" | n_place == 0) %>%
filter(importance == max(importance))
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
#add_count() %>%
mutate(n_place = sum(class == "place")) %>%
filter(class == "place" | n_place == 0) %>%
filter(importance == max(importance)) %>%
right_join(sle, by = c("query" = "loc"))
sle <- filter(prices, Country == "Sierra Leone")
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
#add_count() %>%
mutate(n_place = sum(class == "place")) %>%
filter(class == "place" | n_place == 0) %>%
filter(importance == max(importance))
sle <- filter(prices, Country == "Sierra Leone")
sle <- coords %>%
group_by(query) %>%
filter(!display_name %in% c("Kenema, Kailahun District, Eastern Province, Sierra Leone", "Kenema, Kono District, Eastern Province, Sierra Leone")) %>%
mutate(n_place = sum(class == "place")) %>%
filter(class == "place" | n_place == 0) %>%
filter(importance == max(importance)) %>%
select(-n_place) %>%
right_join(sle, by = c("query" = "loc"))
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp('~/GitHub/sql_table')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?navbarPage
runApp()
runApp()
?useShinyjs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tagList
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##load permanent df to store all submitted samples
##Only has to be performed once
dbWriteTable(pool, "participants_df", participants_df, temporary = FALSE, overwrite = FALSE)
##load permanent df to store all submitted samples
##Only has to be performed once
pool <- dbPool(RSQLite::SQLite(), dbname = "db.sqlite")
dbWriteTable(pool, "participants_df", participants_df, temporary = FALSE, overwrite = FALSE)
##load permanent df to store all submitted samples
##Only has to be performed once
pool <- dbPool(RSQLite::SQLite(), dbname = "db.sqlite")
dbWriteTable(pool, "participants_df", participants_df, temporary = FALSE, overwrite = FALSE)
pool <- dbPool(RSQLite::SQLite(), dbname = "db.sqlite")
dbWriteTable(pool, "participants_df", participants_df, temporary = FALSE, overwrite = FALSE)
##load permanent df to store all submitted samples
##Only has to be performed once
pool <- dbPool(RSQLite::SQLite(), dbname = "db.sqlite")
#Create df for data entry into sql
participants_df <- data.frame(title = character(),
first_name = character(),
last_name = character(),
job_title = character(),
location = character(),
email = character(),
picture = character(),
note = character(),
date = character(),
image_ext = character(),
row_id = character(),
stringsAsFactors = FALSE)
dbWriteTable(pool, "participants_df", participants_df, temporary = FALSE, overwrite = FALSE)
data <- dbReadTable(pool, "participants_df")
##################Load data in sql database from Excel#################
# add a unique row id
unique_id <- function(data){
replicate(nrow(data), UUIDgenerate())
}
participants_data <- read_excel("participant_directory_df.xlsx")
participants_data$date <- format(Sys.Date())
participants_data$row_id <- unique_id(participants_data)
query <- sqlAppendTable(pool, "participants_df", participants_data, row.names = FALSE)
dbExecute(pool, query)
runApp()
runApp()
pool <- dbPool(RSQLite::SQLite(), dbname = "db.sqlite")
participants_df <- dbReadTable(pool, "participants_df")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##load permanent df to store all submitted samples
##Only has to be performed once
pool <- dbPool(RSQLite::SQLite(), dbname = "db.sqlite")
#Create df for data entry into sql
participants_df <- data.frame(title = character(),
first_name = character(),
last_name = character(),
job_title = character(),
location = character(),
email = character(),
picture = character(),
note = character(),
date = character(),
image_ext = character(),
row_id = character(),
stringsAsFactors = FALSE)
dbWriteTable(pool, "participants_df", participants_df, temporary = FALSE, overwrite = FALSE)
data <- dbReadTable(pool, "participants_df")
##################Load data in sql database from Excel#################
# add a unique row id
unique_id <- function(data){
replicate(nrow(data), UUIDgenerate())
}
participants_data <- read_excel("participant_directory_df.xlsx")
participants_data$date <- format(Sys.Date())
participants_data$row_id <- unique_id(participants_data)
query <- sqlAppendTable(pool, "participants_df", participants_data, row.names = FALSE)
dbExecute(pool, query)
runApp()
runApp()
pool <- dbPool(RSQLite::SQLite(), dbname = "db.sqlite")
participants_df <- dbReadTable(pool, "participants_df")
View(participants_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(output)
output$participants_table
runApp()
runApp()
runApp()
runApp()
runApp()
?DT::datatable
runApp()
runApp()
runApp()
runApp()
runApp()
dbListTables(pool)
?UUIDgenerate()
?dbWriteTable
